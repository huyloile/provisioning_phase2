
-module(test_asmetier_webserv).
-author('Yue PENG').
-export([run/0, online/0]).
-compile(export_all).


-include("../include/asmetier_webserv.hrl").
-include("../../oma/include/slog.hrl").
-include("orchideeResponse.hrl").  % .hrl file generated by erlsom
-include("edelweissResponse.hrl").  % .hrl file generated by erlsom
-include("sachemResponse.hrl").    % .hrl file generated by erlsom


-define(PORT,8181).
-define(OrchideeWsdl,"WSDL/OrchideeManager.wsdl").
-define(EdelweissWsdl, "WSDL/EdelweissManager.wsdl").
-define(SachemWsdl, "WSDL/SachemManager.wsdl").
-define(OrchideePrefix,"orchidee").
-define(EdelweissPrefix,"edelweiss").
-define(SachemPrefix,"sachem").
-define(OrchideeCallbackModule, test_asmetier_webserv).
-define(EdelweissCallbackModule, test_asmetier_webserv).
-define(SachemCallbackModule, test_asmetier_webserv).
-define(OrchideeCallbackFun, orchidee_handler).
-define(EdelweissCallbackFun, edelweisss_handler).
-define(SachemCallbackFun,sachem_handler).

-define(test_success_msisdn,"+330000000001").
-define(test_exception_msisdn,"+330000000002").
-define(test_unknown_exception_msisdn,"+33000000003").
-define(idDosOrchid,"100").
-define(idDosEdel,"200").
-define(typeTransfert,"a").
-define(infoBank,"test").
-define(idMsg,"test").
-define(idDosSach,"test").
-define(Amount,"100").

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Unit tests.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%TODO: unit test still failed , error message "no such file or
%%directory","max.app"  , Why need max
run() ->
    application:load(oma),
    application:load(common_tools),
    ok = test_verify(),
    ok = test_replace_orange_key(),
    ok = test_encryption(),
    ok = test_is_exception(),
    ok = test_slog_info(),
    ok. 

test_verify() ->    
    io:format("test verify ~n",[]),
    Msgid_ok = "00000000000000000000000000000001",
    Msgid_nok = "ddddd",
    NumCarte_ok = "1234567890123456",
    NumCarte_nok = "12345678d90123db",
    Court_ok = "abcd",
    Court_nok = "aa",
    Finval_ok = "1122",
    Finval_nok = "abcd",
    Cvx2_ok = "123",
    Cvx2_nok = "123456",
    Empty = "",

    ok = asmetier_webserv:verify(Msgid_ok,NumCarte_ok,Empty,Finval_ok,Cvx2_ok),
    ok = asmetier_webserv:verify(Msgid_ok,Empty,Court_ok,Empty,Cvx2_ok),
    ok = asmetier_webserv:verify(Msgid_ok,Empty,Court_ok,Empty,Empty),
    nok = asmetier_webserv:verify(Msgid_ok,NumCarte_ok,Court_ok,Finval_nok,Cvx2_ok),
    nok = asmetier_webserv:verify(Msgid_ok,NumCarte_ok,Court_nok,Finval_ok,Cvx2_ok),
    nok = asmetier_webserv:verify(Msgid_ok,NumCarte_nok,Court_ok,Finval_ok,Cvx2_ok),
    nok = asmetier_webserv:verify(Msgid_nok,NumCarte_ok,Court_ok,Finval_ok,Cvx2_ok),
    nok = asmetier_webserv:verify(Msgid_ok,NumCarte_ok,Court_ok,Finval_ok,Cvx2_nok),
    nok = asmetier_webserv:verify(Msgid_ok,NumCarte_ok,Court_ok,Finval_ok,Cvx2_ok),
    ok.
test_replace_orange_key()->

    io:format("test des3_crypto:replace_orange_key/1",[]),
    ok = crypto:start(),
    FileName1 = "../../../lib/pfront_orangef/test/keys/key",
    Bad_Binary =
        <<16#01,16#23,16#45,16#67,16#89,16#ab,16#cd,16#ef,16#f1,16#e0,16#d3,16#c2,16#b5,16#97,16#86>>,
    Good_Binary =
        <<16#01,16#23,16#45,16#67,16#89,16#ab,16#cd,16#ef,16#f1,16#e0,16#d3,16#c2,16#b5,16#a4,
         16#97,16#86>>,
    ok = file:write_file(FileName1,Bad_Binary),
    case catch des3_crypto:replace_orange_key(FileName1) of
        {'EXIT',E} ->
            ok;
        ok ->
            exit("should exit if key size is not a multiple of 8 bytes")
    end,
    
    ok = file:write_file(FileName1,Good_Binary),
    {ok,_} = des3_crypto:replace_orange_key(FileName1),
    Expected = <<16#d0,16#c3,16#22, 16#aa,16#fa, 16#e1, 16#2d,16#41,16#49,16#6d,16#f3,16#63,16#0e,16#17,16#80,16#be>>,
    {ok,Expected} = file:read_file(FileName1++".cipher"),
    ok = crypto:stop(),
    ok.
        

test_encryption() ->
    io:format("test encryption~n", []),
    ok = application:load(pfront_orangef),
    ok = application:set_env(pfront_orangef,des3_encryption_keys,["../../../lib/pfront_orangef/test/keys/key.cipher"
                                                                 ]),
    ok = crypto:start(),
    Expected_hex = "FF61796EE944A5598FE5A0F72C69AC959C600B67173E132427F5ACD4",
    Text = "7654321 Now is the time for ",
    Result = des3_crypto:encryption_des3(Text),
    {ok,Expected_hex} = Result,
    io:format("Result is ~p~n", [Result]),
    ok = crypto:stop(),
    ok.
    
test_is_exception()->
    io:format("test is_excetption",[]),
    Bad_Input_1= {error},
    Bad_Input_2 = #rcodDetail{},
    Good_Input = #'ExceptionEtatDossierIncorrect'{},
    false = asmetier_webserv:is_exception(Bad_Input_1),
    false = asmetier_webserv:is_exception(Bad_Input_2),
    true = asmetier_webserv:is_exception(Good_Input),
    ok.


test_slog_info()->    
    io:format("begin test slog_info/3~n",[]),
    Module = asmetier_webserv,
    Request_info = asmetier_webserv:slog_info(count,Module,doRechargementCBOrchid),
    true = is_record(Request_info,slog_info),
    io:format("request #slog_info=~p~n",[Request_info]),
    Response_info = asmetier_webserv:slog_info(count,Module,doRechargementCBOrchid_OK),
    true = is_record(Response_info,slog_info),
    io:format("response_ok #slog_info=~p~n",[Response_info]),
    Response_nok = asmetier_webserv:slog_info(failure,Module,{doRechargementCBOrchid_NOK,test}),
    true = is_record(Response_nok,slog_info),
    io:format("response nok #slog_info=~p~n",[Response_nok]),
    Response_tech_nok = asmetier_webserv:slog_info(failure,Module,{doRechargementCBOrchid_NOK,test}),
    true = is_record(Response_tech_nok,slog_info),
    io:format("response tech nok #slog_info=~p~n",[Response_tech_nok]),
    Response_paiement_exception = asmetier_webserv:slog_info(failure,Module,{doRechargementCBOrchid_NOK,'ExceptionPaiement',test,test,test,test,test}),
    true = is_record(Response_paiement_exception,slog_info),
    io:format("response tech nok #slog_info=~p~n",[Response_paiement_exception]),
    ok.
    
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Online tests.
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


online() ->
    Tests = test_cases(),
    Files = lists:map(fun launch_test/1,Tests),
    MakeEntity =
        fun(File) ->
            " <!ENTITY"++ File ++ "SYSTEM \"tr/" ++ File ++ ".xml\">~n"
        end,
    MakeRef =
        fun(File) ->
                "   &" ++ File ++ ";~n"
        end,
    Entities = lists:flatten(lists:map(MakeEntity,Files)),
    Refs = lists:flatten(lists:map(MakeRef,Files)),
    io:format("Entities:~n" ++ Entities ++ "~nReferences:~n" ++ Refs ++ "~n"),
    ok. 
%%    test_util_of:online(?MODULE,test()),
 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Main Function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

test_cases() ->
    L = [?MODULE_STRING],%"internal_"++?MODULE_STRING],
    lists:map(fun list_to_atom/1,L).

launch_test(Fun) ->
    {Title,Ref,Intro,Config,Feature,Doc} = apply(?MODULE,Fun,[description]),
    
    FileSuffix = atom_to_list(Fun),
    receive after 200 -> ok end,
    ok = testreport:start_link_logger(
        "../doc/" ++ FileSuffix ++ ".html",
        [{title,Title},
         {ref,Ref},
         {intro,Intro},
         {config,Config},
         {feature,Feature},
         {doc,Doc}
        ]), %%create directory doc before 
    test_service:online(apply(?MODULE,Fun,[test])),
    testreport:stop_logger(),
    FileSuffix.

test_asmetier_webserv(description) ->
    description("test asmetier interface");
test_asmetier_webserv(test) ->
   acceptance_test().


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%      Description
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
description(Prefix) ->
    {Prefix ++ service_description(),
     refernce_name(),
     intro(),
     config(?test_success_msisdn),
     feature(),
     additional_doc()
    }.

service_description() ->
    "Test for sachem APIs".

refernce_name() ->
    "test_sachem_api".

intro() ->
    "This is an unit test for sachem APIs.".

config(Msisdn) ->
    "MSISDN = " ++ Msisdn ++"\n"
        "USSD capability: Phase 2,181 characters or 80 UCS2 encoded"
        " characters both for session_ending and in session messages\n".

feature() ->
   "Test asmetier APIs".

additional_doc() ->
    "NA".

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%       acceptance test
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%TODO doRechargementCBEdel test, still failed , need investigation 


acceptance_test()->
    [{title, "Online Test for ASMetier interface"}]++
        rswitch_interface_status(orchidee,enabled)++
	test_doRechargementCBOrchid()++
%%  	test_doRechargementCBEdel()++
	test_isRechargeableCB()++
        test_generate_msgid()++
        rswitch_interface_status(orchidee,disabled)++
	[].


%%TODO the test for now only test we recieved the response , still can't test if the information that we extract from SOAP
%%Response is correct 

test_doRechargementCBOrchid() ->
    yaws_start(), %%start yaws embedded
    yaws_setup_wsdl(?OrchideeCallbackModule,?OrchideeCallbackFun,?OrchideeWsdl,?OrchideePrefix),
    {ok,Response1}  = send_doRechargementCBOrchid(?test_success_msisdn),
    io:format("Response is ~p~n" , [Response1]),
    {exception , Response2 } = send_doRechargementCBOrchid(?test_exception_msisdn),
    io:format("Response is ~p~n" , [Response2]),
    {exception , Response3 } = send_doRechargementCBOrchid(?test_unknown_exception_msisdn),
    io:format("Response is ~p~n" , [Response3]),
    yaws_stop(),
    [].

send_doRechargementCBOrchid(MSISDN) ->
    rpc:call(possum@localhost,asmetier_webserv,doRechargementCBOrchid,[?idDosOrchid,
                                                                       MSISDN,
                                                                       ?typeTransfert,
                                                                       ?infoBank,
                                                                       ?idMsg,
                                                                       ?idDosSach,
                                                                       ?Amount]).

test_doRechargementCBEdel() ->
    yaws_start(),
    yaws_setup_wsdl(?OrchideeCallbackModule,?OrchideeCallbackFun,?EdelweissWsdl,?EdelweissPrefix),
    io:format("test ASmetier Edelweiss doRechargementCB request~n", []),
   %% {ok, Response} = 
    rpc:call(possum@localhost,asmetier_webserv,doRechargementCBEdel,[?idDosEdel,
										      ?test_success_msisdn,
										      ?typeTransfert,
										      ?infoBank,
										      ?idMsg,
										      ?idDosSach,
										      ?Amount]),
   %% io:format("Response is ~p~n" , [Response]),
    yaws_stop(),
    [].

test_isRechargeableCB() ->
    yaws_start(),
    yaws_setup_wsdl(?SachemCallbackModule,?SachemCallbackFun,?SachemWsdl, ?SachemPrefix),

    {ok, Response1} = send_isRechargeableCB(?test_success_msisdn),
    io:format("Response is ~p~n" , [Response1]),
    
    {exception, Response2} =  send_isRechargeableCB(?test_exception_msisdn),
    io:format("Response is ~p~n" , [Response2]),
    yaws_stop(),
    [].

send_isRechargeableCB(MSISDN) ->
    rpc:call(possum@localhost,asmetier_webserv,isRechargeableCB,[MSISDN]).


test_generate_msgid() ->
    io:format("Start testing generate_msgid~n",[]),
    MsgId1 = rpc:call(possum@localhost,asmetier_webserv,generate_msgid,[]),
    MsgId2 = rpc:call(possum@localhost,asmetier_webserv,generate_msgid,[]),
    32 = length(MsgId1),
    32 = length(MsgId2),
    true = (MsgId1 /= MsgId2),
    [].


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%Yaws callback function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%orchidee callback function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
orchidee_handler(_Header,_Request,_Action,_SessionValue)->
    
    case is_list(_Request) andalso is_record(hd(_Request),'orchidee:doRechargementCB') of
            true->{ok,undefined,[doRechargementCBOrchideeResponse(hd(_Request))]};
            false->{error,client,io_lib:format("Error in request ~p , ~p ~n",[_Header,_Request])}
    end.

doRechargementCBOrchideeResponse(Request) when is_record(Request,'orchidee:doRechargementCB') ->
    case Request#'orchidee:doRechargementCB'.'numMSISDN' of
        ?test_success_msisdn ->
            CodeLibelle = #'orchidee:codeLibelle'{'code' = "code", 
                                                  'identifiant' = 100,
                                                  'libelle' = "libelle"},
            Comptes = #'orchidee:compte'{'credit' = "10",
                                         'dateLimiteValidite' = "10/10/10",
                                         'montantFidelisation' = "100",
                                 'planTarifaire' = CodeLibelle,
                                         'pourcentageFidelisation' = "100%",
                                         'typeCompte' = CodeLibelle,
                                         'uniteGestion' = CodeLibelle,
                                         'uniteRestitution' = CodeLibelle
                                        },
            
            Rechargement = 
                #'orchidee:rechargement'{'comptes' = [Comptes , Comptes , Comptes] ,
			  'dateLimiteValiditeDossier' = "10"},
            
            RechargementCB = 
                #'orchidee:rechargementCB'{
              'numAutorisationPaiement' = "0000",
              'rechargement' = Rechargement,
              'tracage' = true }, 
            Response = 
                #'orchidee:doRechargementCBResponse'{'return' = RechargementCB},
            [Response];
        ?test_exception_msisdn ->
            Response = #'orchidee:ECareExceptionFonctionnelle'{'nomComposant' = "test",
                                                               'nomFamille' = "test",
                                                               'codeMessage' = "test",
                                                               'nomClasse'  =  "test",
                                                               'dateException' = "test",
                                                               'gravite' = "test",
                                                               'param1' = "test",
                                                               'param2' = "test",
                                                               'param3' = "test"
                                                               },
            [Response] ;
        ?test_unknown_exception_msisdn ->
            Response = #'orchidee:ExceptionPaiement'{'numClient' = "test",
                                                       'emetteur' = "test",
                                                       'oper' = "test",
                                                       'ctrl' = "test",
                                                       'cret' = "test",
                                                       'etat' = "test",
                                                       'msgid' = "test",
                                                       'nomComposant' = "test",
                                                       'nomFamille' = "test",
                                                       'codeMessage' = "test",
                                                       'nomClasse' = "test",
                                                       'dateException' = "test",
                                                       'gravite' = "test",
                                                       'param1' = "test",
                                                       'param2' = "test",
                                                       'param3' = "test"},
            [Response]    
    
    end;
doRechargementCBOrchideeResponse(Request) ->
    {error, io_lib:format("Request Error , Maybe structure dosen't match record (~p)~n",[Request])}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%edelweiss callback function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                                                                                     
        

edelweiss_handler(_Header,_Request,_Action,_SessionValue)->
    
    case is_list(_Request) andalso is_record(hd(_Request),'edelweiss:doRechargementCB') of
            true->{ok,undefined,[doRechargementCBEdelResponse(hd(_Request))]};
            false->{error,client,io_lib:format("Error in request ~p , ~p ~n",[_Header,_Request])}
    end.

doRechargementCBEdelResponse(Request) when is_record(Request,'edelweiss:doRechargementCB') ->

 CodeLibelle = #'edelweiss:codeLibelle'{'code' = "code",
                                                  'identifiant' = 100,
                                                  'libelle' = "libelle"},
            Comptes = #'edelweiss:compte'{'credit' = "10",
                                         'dateLimiteValidite' = "10/10/10",
                                         'montantFidelisation' = "100",
                                 'planTarifaire' = CodeLibelle,
                                         'pourcentageFidelisation' = "100%",
                                         'typeCompte' = CodeLibelle,
                                         'uniteGestion' = CodeLibelle,
                                         'uniteRestitution' = CodeLibelle
                                        },

            Rechargement =
                #'edelweiss:rechargement'{'comptes' = [Comptes , Comptes ,
                                                      Comptes] ,
                          'dateLimiteValiditeDossier' = "10"},

            RechargementCB =
                #'edelweiss:rechargementCB'{
              'numAutorisationPaiement' = "0000",
              'rechargement' = Rechargement,
              'tracage' = true },
            Response =
                #'edelweiss:doRechargementCBResponse'{'return' = RechargementCB},
            [Response];

doRechargementCBEdelResponse(Request) ->
    {error, io_lib:format("Request Error , Maybe structure dosen't match record (~p)~n",[Request])}.

                                                                                     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%Sachem callback function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                                                                                     
        

sachem_handler(_Header,_Request,_Action,_SessionValue)->
    
    case is_list(_Request) andalso is_record(hd(_Request),'sachem:isRechargeableCB') of
            true->{ok,undefined,[isRechargeableCBResponse(hd(_Request))]};
            false->{error,client,io_lib:format("Error in request ~p , ~p ~n",[_Header,_Request])}
    end.

isRechargeableCBResponse(Request) when is_record(Request,'sachem:isRechargeableCB') ->
    case Request#'sachem:isRechargeableCB'.numMSISDN of
        ?test_success_msisdn ->
            RechargementPossible = 
                #'sachem:rechargementPossible'{'dureeValidite' = 100110,
                                               'montantOffert' = "12",
                                               'montantPaye' = "20"},
            
            
            
            RechargeableCB = 
                #'sachem:rechargeableCB'{
              'idDossier' = "0000",
              'mobicarte' = true ,
              'montantMaxRechargeable' = "10",
              'plafond' ="10",
              'rechargementsPossibles' =[ RechargementPossible , RechargementPossible ]}, 
            Response = 
                #'sachem:isRechargeableCBResponse'{'return' = RechargeableCB},
            [Response];
        ?test_exception_msisdn ->
            Response = #'sachem:ExceptionEtatDossierIncorrect'{'nomComposant' = "test",
                                                               'nomFamille' = "test",
                                                               'codeMessage' = "test",
                                                               'nomClasse'  =  "test",
                                                               'dateException' = "test",
                                                               'gravite' = "test",
                                                               'param1' = "test",
                                                               'param2' = "test",
                                                               'param3' = "test"
                                                               },
            [Response]
    end;
            
isRechargeableCBResponse(Request) ->
    {error, io_lib:format("Request Error , Maybe structure dosen't match record (~p)~n",[Request])}.

                                                                                     
        


        

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%Yaws function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

yaws_start()->

    Docroot=".",
    GL = [{enable_soap,true},{trace,false},{debug,true},{tmpdir,Docroot},
	  {logdir,Docroot},{flags,[{auth_log,false},{tty_trace, true},{copy_errlog, true}]}],
    SL = [{port,?PORT},{servername,"localhost"},{dir_listings, true},{listen,{127,0,0,1}},{flags,[{access_log,false}]}],
    code:add_path(Docroot),
    ok = yaws:start_embedded(Docroot,SL,GL).



    
yaws_stop()->
    yaws:stop().

%% input is file path to wsdl definition file
yaws_setup_wsdl(Call_back_module,Call_back_function,WSDL,Prefix) ->
    yaws_soap_srv:setup({Call_back_module, Call_back_function}, WSDL,Prefix),
    receive after 1000 ->
                    ok
            end.

rswitch_interface_status(Name,Status)->
    rpc:call(possum@localhost,
             pcontrol,
             case Status of
                 enabled -> enable_itfs;
                 disabled -> disable_itfs
             end,
             [[Name,possum@localhost]]),
    receive after 5000 -> ok end,
    [case Status of 
	 enabled ->
	     "Connexion";
	 disabled -> 
	     "Deconnexion"
     end ++
     " de l'interface " ++ atom_to_list(Name)].
